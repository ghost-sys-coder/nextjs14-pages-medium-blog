// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid()) @map("_id")
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid()) @map("_id")
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  post          Post[]
  comment       Comments[]
}

model VerificationToken {
  identifier String   @id @default(cuid()) @map("_id")
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// categories schema
model Category {
  id    String  @id @default(cuid()) @map("_id")
  slug  String  @unique
  title String
  img   String?
  posts Post[]
}

//Posts Schema
model Post {
  id          String     @id @default(cuid()) @map("_id")
  slug        String     @unique
  title       String
  description String
  image       String?
  views       Int        @default(0)
  likes       Int        @default(0)
  tags        String
  catSlug     String
  cat         Category   @relation(fields: [catSlug], references: [slug])
  userEmail   String
  user        User       @relation(fields: [userEmail], references: [email])
  comment     Comments[]
  createdAt   DateTime   @default(now())
}

//Comments Schema
model Comments {
  id          String @id @default(cuid()) @map("_id")
  description String
  userEmail   String
  postSlug    String
  user        User   @relation(fields: [userEmail], references: [email])
  post        Post   @relation(fields: [postSlug], references: [slug])
}
